# üß™ Teste Completo do Zero - PatoCash
# Este script simula uma instala√ß√£o completamente nova em qualquer PC

param(
    [switch]$LimparTudo,
    [switch]$SemPrompt
)

Write-Host "üß™ TESTE COMPLETO DO ZERO - PATOCASH" -ForegroundColor Green
Write-Host "=" * 50
Write-Host "üéØ Objetivo: Simular instala√ß√£o em PC novo" -ForegroundColor Cyan
Write-Host "üìã Este teste vai:" -ForegroundColor Yellow
Write-Host "   ‚úÖ Limpar todo o ambiente atual" -ForegroundColor Yellow
Write-Host "   ‚úÖ Verificar pr√©-requisitos" -ForegroundColor Yellow
Write-Host "   ‚úÖ Fazer deploy completo do zero" -ForegroundColor Yellow
Write-Host "   ‚úÖ Testar funcionalidades" -ForegroundColor Yellow
Write-Host ""

if (-not $SemPrompt) {
    $confirmacao = Read-Host "üö® ATEN√á√ÉO: Isso vai APAGAR todos os recursos atuais! Continuar? (s/N)"
    if ($confirmacao -ne 's' -and $confirmacao -ne 'S') {
        Write-Host "‚ùå Teste cancelado pelo usu√°rio" -ForegroundColor Red
        exit 0
    }
}

# Fun√ß√£o para verificar comandos dispon√≠veis
function Test-Prerequisites {
    Write-Host "üîç VERIFICANDO PR√â-REQUISITOS..." -ForegroundColor Cyan
    Write-Host "-" * 40
    
    $prerequisites = @()
    
    # Verificar Docker
    try {
        $dockerVersion = docker --version 2>$null
        if ($dockerVersion) {
            Write-Host "‚úÖ Docker: $dockerVersion" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Docker n√£o encontrado!" -ForegroundColor Red
            $prerequisites += "Docker Desktop"
        }
    } catch {
        Write-Host "‚ùå Docker n√£o encontrado!" -ForegroundColor Red
        $prerequisites += "Docker Desktop"
    }
    
    # Verificar kubectl
    try {
        $kubectlVersion = kubectl version --client=true 2>$null | Select-String "Client Version"
        if ($kubectlVersion) {
            Write-Host "‚úÖ kubectl: $kubectlVersion" -ForegroundColor Green
        } else {
            Write-Host "‚ùå kubectl n√£o encontrado!" -ForegroundColor Red
            $prerequisites += "kubectl"
        }
    } catch {
        Write-Host "‚ùå kubectl n√£o encontrado!" -ForegroundColor Red
        $prerequisites += "kubectl"
    }
    
    # Verificar Minikube
    try {
        $minikubeVersion = minikube version 2>$null | Select-String "minikube version"
        if ($minikubeVersion) {
            Write-Host "‚úÖ Minikube: $minikubeVersion" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Minikube n√£o encontrado!" -ForegroundColor Red
            $prerequisites += "Minikube"
        }
    } catch {
        Write-Host "‚ùå Minikube n√£o encontrado!" -ForegroundColor Red
        $prerequisites += "Minikube"
    }
    
    # Verificar arquivos do projeto
    $requiredFiles = @(
        "deploy-seguro.ps1",
        "create-secret.ps1", 
        ".env-exemplo-seguro",
        "k8s-backend.yaml",
        "k8s-frontend.yaml",
        "k8s-postgres.yaml",
        "k8s-configmap.yaml",
        "k8s-hpa.yaml",
        "banco_de_dados\init.sql",
        "banco_de_dados\insersao_user.sql"
    )
    
    Write-Host ""
    Write-Host "üìÅ Verificando arquivos do projeto:" -ForegroundColor Cyan
    foreach ($file in $requiredFiles) {
        if (Test-Path $file) {
            Write-Host "‚úÖ $file" -ForegroundColor Green
        } else {
            Write-Host "‚ùå $file - AUSENTE!" -ForegroundColor Red
            $prerequisites += $file
        }
    }
    
    if ($prerequisites.Count -gt 0) {
        Write-Host ""
        Write-Host "‚ùå PR√â-REQUISITOS FALTANDO:" -ForegroundColor Red
        foreach ($item in $prerequisites) {
            Write-Host "   - $item" -ForegroundColor Yellow
        }
        Write-Host ""
        Write-Host "üìã Instale os pr√©-requisitos antes de continuar!" -ForegroundColor Yellow
        return $false
    }
    
    Write-Host ""
    Write-Host "‚úÖ TODOS OS PR√â-REQUISITOS ATENDIDOS!" -ForegroundColor Green
    return $true
}

# Fun√ß√£o para limpar ambiente
function Clear-Environment {
    Write-Host "üßπ LIMPANDO AMBIENTE ATUAL..." -ForegroundColor Yellow
    Write-Host "-" * 40
    
    # Parar port-forwards
    Write-Host "üîå Matando port-forwards ativos..." -ForegroundColor Cyan
    Get-Process | Where-Object { $_.ProcessName -eq "kubectl" } | ForEach-Object {
        try {
            $_.Kill()
            Write-Host "‚úÖ Processo kubectl $($_.Id) terminado" -ForegroundColor Green
        } catch {
            Write-Host "‚ö†Ô∏è  Processo $($_.Id) j√° terminado" -ForegroundColor Yellow
        }
    }
    
    # Deletar recursos do Kubernetes
    Write-Host "üóëÔ∏è  Removendo recursos do Kubernetes..." -ForegroundColor Cyan
    
    $resources = @(
        "hpa patocast-hpa",
        "deployment patocast-backend patocast-frontend postgres",
        "service patocast-backend-service patocast-frontend-service postgres-service",
        "configmap patocast-config postgres-init-scripts",
        "secret patocast-secrets"
    )
    
    foreach ($resource in $resources) {
        Write-Host "üóëÔ∏è  kubectl delete $resource" -ForegroundColor Gray
        kubectl delete $resource --ignore-not-found=true 2>$null | Out-Null
    }
    
    # Remover arquivo .env se existir
    if (Test-Path ".env") {
        Write-Host "üóëÔ∏è  Removendo .env atual..." -ForegroundColor Cyan
        Remove-Item ".env" -Force
    }
    
    Write-Host "‚úÖ Ambiente limpo!" -ForegroundColor Green
    Write-Host ""
}

# Fun√ß√£o para verificar Minikube
function Test-MinikubeCluster {
    Write-Host "üê≥ VERIFICANDO CLUSTER MINIKUBE..." -ForegroundColor Cyan
    Write-Host "-" * 40
    
    # Verificar se Minikube est√° rodando
    $minikubeStatus = minikube status 2>$null
    if ($minikubeStatus -match "Running") {
        Write-Host "‚úÖ Minikube j√° est√° rodando" -ForegroundColor Green
        
        # Verificar metrics-server
        $metricsServer = kubectl get apiservice v1beta1.metrics.k8s.io 2>$null
        if (-not $metricsServer) {
            Write-Host "‚ö†Ô∏è  Habilitando metrics-server..." -ForegroundColor Yellow
            minikube addons enable metrics-server
        } else {
            Write-Host "‚úÖ Metrics-server dispon√≠vel" -ForegroundColor Green
        }
        
        return $true
    }
    
    Write-Host "üöÄ Iniciando Minikube..." -ForegroundColor Yellow
    minikube start --driver=docker --memory=4096 --cpus=2
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Minikube iniciado com sucesso!" -ForegroundColor Green
        
        # Habilitar metrics-server
        Write-Host "üìä Habilitando metrics-server..." -ForegroundColor Cyan
        minikube addons enable metrics-server
        
        # Aguardar metrics-server ficar pronto
        Write-Host "‚è≥ Aguardando metrics-server..." -ForegroundColor Yellow
        Start-Sleep -Seconds 30
        
        return $true
    } else {
        Write-Host "‚ùå Falha ao iniciar Minikube!" -ForegroundColor Red
        return $false
    }
}

# Fun√ß√£o para criar .env
function Create-TestEnv {
    Write-Host "üîê CRIANDO ARQUIVO .ENV DE TESTE..." -ForegroundColor Cyan
    Write-Host "-" * 40
    
    if (-not (Test-Path ".env-exemplo-seguro")) {
        Write-Host "‚ùå Arquivo .env-exemplo-seguro n√£o encontrado!" -ForegroundColor Red
        return $false
    }
    
    # Copiar exemplo para .env
    Copy-Item ".env-exemplo-seguro" ".env"
    Write-Host "‚úÖ Arquivo .env criado a partir do exemplo" -ForegroundColor Green
    
    # Mostrar conte√∫do
    Write-Host "üìã Conte√∫do do .env:" -ForegroundColor Yellow
    Get-Content ".env" | ForEach-Object { Write-Host "   $_" -ForegroundColor Gray }
    
    Write-Host ""
    Write-Host "‚ö†Ô∏è  IMPORTANTE: Em produ√ß√£o, use credenciais reais!" -ForegroundColor Yellow
    Write-Host ""
    
    return $true
}

# Fun√ß√£o para testar aplica√ß√£o
function Test-Application {
    Write-Host "üß™ TESTANDO APLICA√á√ÉO..." -ForegroundColor Cyan
    Write-Host "-" * 40
    
    # Aguardar pods ficarem prontos
    Write-Host "‚è≥ Aguardando pods ficarem prontos..." -ForegroundColor Yellow
    $timeout = 300  # 5 minutos
    $start = Get-Date
    
    while ((Get-Date) -lt $start.AddSeconds($timeout)) {
        $backendReady = kubectl get pods -l app=patocast-backend --no-headers | Where-Object { $_ -match "Running.*1/1" }
        $frontendReady = kubectl get pods -l app=patocast-frontend --no-headers | Where-Object { $_ -match "Running.*1/1" }
        
        if ($backendReady -and $frontendReady) {
            Write-Host "‚úÖ Todos os pods est√£o prontos!" -ForegroundColor Green
            break
        }
        
        Write-Host "‚è≥ Aguardando pods... ($(([math]::Round(((Get-Date) - $start).TotalSeconds)))s)" -ForegroundColor Gray
        Start-Sleep -Seconds 10
    }
    
    # Mostrar status final
    Write-Host ""
    Write-Host "üìä STATUS FINAL DOS PODS:" -ForegroundColor Green
    kubectl get pods -l app=patocast-backend,app=patocast-frontend
    
    Write-Host ""
    Write-Host "üìà STATUS DO HPA:" -ForegroundColor Green
    kubectl get hpa patocast-hpa
    
    Write-Host ""
    Write-Host "üåê STATUS DOS SERVI√áOS:" -ForegroundColor Green
    kubectl get services -l app=patocast-backend,app=patocast-frontend
    
    return $true
}

# EXECU√á√ÉO PRINCIPAL
Write-Host "üöÄ INICIANDO TESTE COMPLETO..." -ForegroundColor Green
Write-Host ""

# 1. Verificar pr√©-requisitos
if (-not (Test-Prerequisites)) {
    exit 1
}

# 2. Limpar ambiente
Clear-Environment

# 3. Verificar/iniciar Minikube
if (-not (Test-MinikubeCluster)) {
    exit 1
}

# 4. Criar arquivo .env
if (-not (Create-TestEnv)) {
    exit 1
}

# 5. Executar deploy seguro
Write-Host "üöÄ EXECUTANDO DEPLOY SEGURO..." -ForegroundColor Green
Write-Host "-" * 40
try {
    & ".\deploy-seguro.ps1"
    if ($LASTEXITCODE -ne 0) {
        throw "Deploy falhou"
    }
    Write-Host "‚úÖ Deploy executado com sucesso!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Falha no deploy: $_" -ForegroundColor Red
    exit 1
}

# 6. Testar aplica√ß√£o
Test-Application

# 7. Resultado final
Write-Host ""
Write-Host "üéâ TESTE COMPLETO DO ZERO - CONCLU√çDO!" -ForegroundColor Green
Write-Host "=" * 50
Write-Host "‚úÖ Ambiente limpo e recriado" -ForegroundColor Green
Write-Host "‚úÖ Minikube verificado/iniciado" -ForegroundColor Green
Write-Host "‚úÖ Arquivo .env criado" -ForegroundColor Green
Write-Host "‚úÖ Deploy seguro executado" -ForegroundColor Green
Write-Host "‚úÖ Aplica√ß√£o testada" -ForegroundColor Green
Write-Host ""
Write-Host "üåê Acesse a aplica√ß√£o em: http://localhost:3000" -ForegroundColor Cyan
Write-Host "üß™ Para testes de resili√™ncia: .\teste-estresse.ps1" -ForegroundColor Yellow
Write-Host ""
Write-Host "‚ú® A aplica√ß√£o PatoCash est√° 100% funcional!" -ForegroundColor Green